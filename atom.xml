<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>阿杜的博客</title>
  
  <subtitle>一亩三分地</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="/"/>
  <updated>2018-06-08T09:01:35.995Z</updated>
  <id>/</id>
  
  <author>
    <name>杜少峰</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>electron-vue架构解析-页面元素渲染过程分析</title>
    <link href="/2018/06/08/electron-vue%E6%9E%B6%E6%9E%84%E8%A7%A3%E6%9E%90-%E9%A1%B5%E9%9D%A2%E5%85%83%E7%B4%A0%E6%B8%B2%E6%9F%93%E8%BF%87%E7%A8%8B%E5%88%86%E6%9E%90/"/>
    <id>/2018/06/08/electron-vue架构解析-页面元素渲染过程分析/</id>
    <published>2018-06-08T08:48:07.000Z</published>
    <updated>2018-06-08T09:01:35.995Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><p>页面元素渲染结构分析</p><h1 id="界面源码介绍"><a href="#界面源码介绍" class="headerlink" title="界面源码介绍"></a>界面源码介绍</h1><p>前面介绍了整个环境的创建过程，这一节我们来看具体页面渲染的过程。<br>由于页面渲染都是在渲染进程完成的，我们就从渲染进程的配置文件来看入口在哪里。<br>前面介绍过，渲染进程公用了两个配置文件，一个是electron-vue/dev-client.js，他负责在界面上提示当前的编译步骤，而另一个配置文件在webpack.renderer.config.js中定义：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> rendererConfig = &#123;</span><br><span class="line">    ...</span><br><span class="line">    entry: &#123;</span><br><span class="line">        renderer: path.join(__dirname, <span class="string">'../src/renderer/main.js'</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也就是说，渲染进程的真正入口文件在<code>src/renderer/main.js</code>里面。<br>我们来看这个文件内容：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App'</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">'./router'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!process.env.IS_WEB) Vue.use(<span class="built_in">require</span>(<span class="string">'vue-electron'</span>))</span><br><span class="line">Vue.config.productionTip = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  components: &#123; App &#125;,</span><br><span class="line">  router,</span><br><span class="line">  template: <span class="string">'&lt;App/&gt;'</span></span><br><span class="line">&#125;).$mount(<span class="string">'#app'</span>)</span><br></pre></td></tr></table></figure><p>这个文件内容很简单，就是创建一个Vue对象，并将<code>App</code>这个Vue组件挂载到页面的<code>app</code>元素挂载上去。<br>这里的App组件根据import语句看到，他就是当前目录下的App.vue文件，由于在webpack配置的extensions字段中说明了所有vue格式文件在引用时都无需添加后缀，因此这里的import只需要使用<code>App</code>即可。<br>那么这个App组件究竟挂载到哪里的html上呢？我们还要从webpack配置说起。<br>渲染进程的webpack中使用了一个<a href="https://github.com/jantimon/html-webpack-plugin" target="_blank" rel="noopener">html-webpack-plugin</a>的插件，可以根据模板生成首页的html：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">    filename: <span class="string">'index.html'</span>,</span><br><span class="line">    template: path.resolve(__dirname, <span class="string">'../src/index.ejs'</span>),</span><br><span class="line">    minify: &#123;</span><br><span class="line">        collapseWhitespace: <span class="literal">true</span>,</span><br><span class="line">        removeAttributeQuotes: <span class="literal">true</span>,</span><br><span class="line">        removeComments: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    nodeModules: process.env.NODE_ENV !== <span class="string">'production'</span></span><br><span class="line">        ? path.resolve(__dirname, <span class="string">'../node_modules'</span>)</span><br><span class="line">        : <span class="literal">false</span></span><br><span class="line">&#125;),</span><br></pre></td></tr></table></figure><p>这说明模板就是<code>src/index.ejs</code>文件：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>electron-vue-framework<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span> (<span class="attr">htmlWebpackPlugin.options.nodeModules</span>) &#123; %&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="built_in">require</span>(<span class="string">'module'</span>).globalPaths.push(<span class="string">'&lt;%= htmlWebpackPlugin.options.nodeModules.replace(/\\/g, '</span>\\\\<span class="string">') %&gt;'</span>)</span></span><br><span class="line"><span class="undefined">      </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">      <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'development'</span>) <span class="built_in">window</span>.__static = <span class="built_in">require</span>(<span class="string">'path'</span>).join(__dirname, <span class="string">'/static'</span>).replace(<span class="regexp">/\\/g</span>, <span class="string">'\\\\'</span>)</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这个模板会被html-webpack-plugin插件生成为index.html文件，而这个模板中就包含了唯一的<div>元素：<code>app</code>。<br>也就是说，App这个Vue组件的挂载点就在生成的index.html文件上，并且是整个页面唯一的元素。<br>我们接下来看App这个组件的内容：</div></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;router-view&gt;<span class="xml"><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">  export default &#123;</span></span><br><span class="line"><span class="regexp">    name: 'electron-vue-framework'</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure><p>这个组件说明，内部包含一个路由控件，并且没有指定具体路由地址（那么Vue就会加载路由中的默认地址），我们来看router/index.js中为Vue定义的路由表：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> Router <span class="keyword">from</span> <span class="string">'vue-router'</span></span><br><span class="line">Vue.use(Router)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Router(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">'/'</span>,</span><br><span class="line">      name: <span class="string">'landing-page'</span>,</span><br><span class="line">      component: <span class="built_in">require</span>(<span class="string">'@/components/LandingPage'</span>).default</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">'*'</span>,</span><br><span class="line">      redirect: <span class="string">'/'</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这说明默认路由叫做<code>landing-page</code>，对应的组件是LandingPage.vue，我们来看这个组件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=<span class="string">"wrapper"</span>&gt;</span><br><span class="line">    &lt;img id=<span class="string">"logo"</span> src=<span class="string">"~@/assets/logo.png"</span> alt=<span class="string">"electron-vue"</span>&gt;</span><br><span class="line">    &lt;main&gt;</span><br><span class="line">      &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"left-side"</span>&gt;</span><br><span class="line">        &lt;span <span class="class"><span class="keyword">class</span></span>=<span class="string">"title"</span>&gt;</span><br><span class="line">          Welcome to your <span class="keyword">new</span> project!</span><br><span class="line">        &lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">        &lt;system-information&gt;&lt;/</span>system-information&gt;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">      &lt;div class="right-side"&gt;</span></span><br><span class="line"><span class="regexp">        &lt;div class="doc"&gt;</span></span><br><span class="line"><span class="regexp">          &lt;div class="title"&gt;Getting Started&lt;/</span>div&gt;</span><br><span class="line">          &lt;p&gt;</span><br><span class="line">            electron-vue comes packed <span class="keyword">with</span> detailed documentation that covers everything <span class="keyword">from</span></span><br><span class="line">            internal configurations, using the project structure, building your application,</span><br><span class="line">            and so much more.</span><br><span class="line">          &lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">          &lt;button @click="open('https:/</span><span class="regexp">/simulatedgreg.gitbooks.io/</span>electron-vue/content/<span class="string">')"&gt;Read the Docs&lt;/button&gt;&lt;br&gt;&lt;br&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">        &lt;div class="doc"&gt;</span></span><br><span class="line"><span class="string">          &lt;div class="title alt"&gt;Other Documentation&lt;/div&gt;</span></span><br><span class="line"><span class="string">          &lt;button class="alt" @click="open('</span>https:<span class="comment">//electron.atom.io/docs/')"&gt;Electron&lt;/button&gt;</span></span><br><span class="line">          &lt;button <span class="class"><span class="keyword">class</span></span>=<span class="string">"alt"</span> @click=<span class="string">"open('https://vuejs.org/v2/guide/')"</span>&gt;Vue.js&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>div&gt;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/m</span>ain&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">...</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;style&gt;</span></span><br><span class="line"><span class="regexp">...</span></span><br><span class="line"><span class="regexp">&lt;/</span>style&gt;</span><br></pre></td></tr></table></figure><p>这里很清晰的看到，这个页面包含了<code>left-side</code>和<code>right-side</code>两个div，分列页面左右（具体排列可以查看css中描述），左侧的布局还嵌套了一个<code>system-information</code>的组件，而右侧布局中就是一些文字+按钮。<br>而<code>system-information</code>的组件就是SystemInformation.vue文件，内容如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"title"</span>&gt;Information&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;div class="items"&gt;</span></span><br><span class="line"><span class="regexp">      &lt;div class="item"&gt;</span></span><br><span class="line"><span class="regexp">        &lt;div class="name"&gt;Path:&lt;/</span>div&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"value"</span>&gt;&#123;&#123; path &#125;&#125;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">      &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"item"</span>&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"name"</span>&gt;Route Name:<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"value"</span>&gt;&#123;&#123; name &#125;&#125;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">      &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"item"</span>&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"name"</span>&gt;Vue.js:<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"value"</span>&gt;&#123;&#123; vue &#125;&#125;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">      &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"item"</span>&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"name"</span>&gt;Electron:<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"value"</span>&gt;&#123;&#123; electron &#125;&#125;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">      &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"item"</span>&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"name"</span>&gt;Node:<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"value"</span>&gt;&#123;&#123; node &#125;&#125;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">      &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"item"</span>&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"name"</span>&gt;Platform:<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"value"</span>&gt;&#123;&#123; platform &#125;&#125;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">...</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">...</span><br><span class="line">&lt;<span class="regexp">/style&gt;</span></span><br></pre></td></tr></table></figure><p>这都是一些系统属性。<br>至此，我们明白了整个页面是怎么被渲染出来的。他的布局如下：<br><img src="页面布局.png" alt=""><br>通过<code>vue-devtools</code>工具我们也可以看出他的渲染结构：<br><img src="vue插件.png" alt=""><br>至此，整个页面的渲染过程我们就分析完了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- toc --&gt;
&lt;p&gt;页面元素渲染结构分析&lt;/p&gt;
&lt;h1 id=&quot;界面源码介绍&quot;&gt;&lt;a href=&quot;#界面源码介绍&quot; class=&quot;headerlink&quot; title=&quot;界面源码介绍&quot;&gt;&lt;/a&gt;界面源码介绍&lt;/h1&gt;&lt;p&gt;前面介绍了整个环境的创建过程，这一节我们来看具
      
    
    </summary>
    
    
      <category term="electron" scheme="/tags/electron/"/>
    
      <category term="vue" scheme="/tags/vue/"/>
    
      <category term="electron-vue" scheme="/tags/electron-vue/"/>
    
      <category term="前端" scheme="/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>electron-vue架构解析-开发环境启动流程分析</title>
    <link href="/2018/06/08/electron-vue%E6%9E%B6%E6%9E%84%E8%A7%A3%E6%9E%90-%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/"/>
    <id>/2018/06/08/electron-vue架构解析-开发环境启动流程分析/</id>
    <published>2018-06-08T08:47:52.000Z</published>
    <updated>2018-06-08T08:59:36.981Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><p>这一节我们来看开发环境的启动流程。<br>该框架主要修改是对开发环境的优化，包括了于开发环境的配置文件隔离，主进程和渲染进程配置文件隔离，编译过程提示等功能，因此这一节内容才是整个框架的核心。<br>我们从开发人员用到的启动命令说起。<br>从package中我们看到启动命令就是：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"dev"</span>: <span class="string">"node .electron-vue/dev-runner.js"</span>,</span><br></pre></td></tr></table></figure><p>也就是在终端使用<code>npm run dev</code>就可以了，而这个命令对应的脚本就是dev-runner.js。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    greeting();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Promise</span>.all([startRenderer(), startMain()])</span><br><span class="line">        .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            startElectron();</span><br><span class="line">        &#125;)</span><br><span class="line">        .catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.error(err);</span><br><span class="line">        &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是脚本运行时执行的唯一方法，其中的greeting()就是在终端输出一个Log，如图所示：<br><img src="欢迎的Log.png" alt=""></p><p>然后做了三个操作分别启动了渲染进程、主进程和Electron：</p><ul><li>startRenderer()</li><li>startMain()</li><li>startElectron()</li></ul><p>下面我们逐个来看具体的启动流程。</p><h1 id="1-渲染进程启动过程分析"><a href="#1-渲染进程启动过程分析" class="headerlink" title="1.渲染进程启动过程分析"></a>1.渲染进程启动过程分析</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">startRenderer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//加载webpack配置文件</span></span><br><span class="line">        rendererConfig.entry.renderer = [path.join(__dirname, <span class="string">'dev-client'</span>)].concat(rendererConfig.entry.renderer);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建webpack</span></span><br><span class="line">        <span class="keyword">const</span> compiler = webpack(rendererConfig);</span><br><span class="line">        <span class="comment">//创建webpack-hot-middleware</span></span><br><span class="line">        hotMiddleware = webpackHotMiddleware(compiler, &#123;</span><br><span class="line">            log: <span class="literal">false</span>,</span><br><span class="line">            heartbeat: <span class="number">2500</span></span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//编译状态监控</span></span><br><span class="line">        compiler.plugin(<span class="string">'compilation'</span>, compilation =&gt; &#123;</span><br><span class="line">            compilation.plugin(<span class="string">'html-webpack-plugin-after-emit'</span>, (data, cb) =&gt; &#123;</span><br><span class="line">                hotMiddleware.publish(&#123;<span class="attr">action</span>: <span class="string">'reload'</span>&#125;);</span><br><span class="line">                cb();</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        compiler.plugin(<span class="string">'done'</span>, stats =&gt; &#123;</span><br><span class="line">            logStats(<span class="string">'Renderer'</span>, stats);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建webpack-dev-server</span></span><br><span class="line">        <span class="keyword">const</span> server = <span class="keyword">new</span> WebpackDevServer(</span><br><span class="line">            compiler,</span><br><span class="line">            &#123;</span><br><span class="line">                contentBase: path.join(__dirname, <span class="string">'../'</span>),</span><br><span class="line">                quiet: <span class="literal">true</span>,</span><br><span class="line">                before(app, ctx) &#123;</span><br><span class="line">                    app.use(hotMiddleware);</span><br><span class="line">                    ctx.middleware.waitUntilValid(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                        resolve();</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        server.listen(<span class="number">9080</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个方法里，共完成了三个操作：</p><ul><li>创建webpack对象</li><li>利用webpack对象来创建WebpackDevServer对象</li><li>监听webpack编译过程</li></ul><p>我们分别来看这三个操作的具体情况。</p><h2 id="1-1-渲染进程创建webpack对象"><a href="#1-1-渲染进程创建webpack对象" class="headerlink" title="1.1.渲染进程创建webpack对象"></a>1.1.渲染进程<strong>创建webpack对象</strong></h2><p>webpack对象创建时使用的配置文件是我们分析的重点。我们来看webpack的配置文件，也就是rendererConfig变量：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rendererConfig.entry.renderer = [path.join(__dirname, <span class="string">'dev-client'</span>)].concat(rendererConfig.entry.renderer);</span><br></pre></td></tr></table></figure><p>这说明webpack的配置文件来自于两个文件：dev-client模块和rendererConfig.entry.renderer变量。<br>这里看一下源码就知道，concat方法连接而成的数组中包含了两个元素，一个是”dev-client”，另一个是根目录的”../src/renderer/main.js”文件，也就是说，webpack的entry参数实际上是这种形式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">entry: &#123;</span><br><span class="line">    renderer: [<span class="string">'dev-client'</span>,path.join(__dirname, <span class="string">'../src/renderer/main.js'</span>)]</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>再来看一下output参数内容（在webpack.renderer.config.js）：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">output: &#123;</span><br><span class="line">    filename: <span class="string">'[name].js'</span>,</span><br><span class="line">    libraryTarget: <span class="string">'commonjs2'</span>,</span><br><span class="line">    path: path.join(__dirname, <span class="string">'../dist/electron'</span>)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>这种用法包含了三个信息：</p><ul><li>webpack将会把dev-client<strong>模块</strong>和main.js<strong>文件</strong>同时打包进output指定的文件中</li><li>dev-client是一个模块，根据源码查找，这个模块就是dev-client.js文件</li><li>entry内容以key–value形式定义，那么output中的name变量就是entry中的key</li></ul><p>综合来说，这种用法的作用就是：同时把dev-client.js和main.js文件打包，输出到根目录下的/dist/electron/render.js文件中。<br>这个信息非常重要，后面要用到。<br>接下来我们先来解决这两个文件的作用。</p><h3 id="渲染进程的dev-client配置文件"><a href="#渲染进程的dev-client配置文件" class="headerlink" title="渲染进程的dev-client配置文件"></a>渲染进程的dev-client配置文件</h3><p>这个文件内容很简单，直接贴出源码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> hotClient = <span class="built_in">require</span>(<span class="string">'webpack-hot-middleware/client?noInfo=true&amp;reload=true'</span>);</span><br><span class="line"><span class="comment">//注册webpack-hot-middleware监听器</span></span><br><span class="line">hotClient.subscribe(<span class="function"><span class="params">event</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//这里只处理了Main进程发送的"compiling"的事件，实际上在Render进程中还发送了"reload"的消息</span></span><br><span class="line">    <span class="keyword">if</span> (event.action === <span class="string">'compiling'</span>) &#123;</span><br><span class="line">      ...</span><br><span class="line">      &lt;div id=<span class="string">"dev-client"</span>&gt;</span><br><span class="line">        Compiling Main Process...</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    `;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;);</span></span><br></pre></td></tr></table></figure><p>我们直接来说作用，他负责在编译过程中，在界面上显示“Compiling Main Process…”的提示语。<br>效果如下：<br><img src="render编译log.png" alt=""><br>至于他如何检测编译过程，我们稍后来说。</p><h3 id="渲染进程的webpack-renderer-config配置文件"><a href="#渲染进程的webpack-renderer-config配置文件" class="headerlink" title="渲染进程的webpack.renderer.config配置文件"></a>渲染进程的webpack.renderer.config配置文件</h3><p>接下来我们来看渲染进程的主配置文件的主要内容：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将vue模块列为白名单</span></span><br><span class="line"><span class="keyword">let</span> whiteListedModules = [<span class="string">'vue'</span>];</span><br><span class="line"><span class="keyword">let</span> rendererConfig = &#123;</span><br><span class="line">    <span class="comment">//指定sourcemap方式</span></span><br><span class="line">    devtool: <span class="string">'#cheap-module-eval-source-map'</span>,</span><br><span class="line">    entry: &#123;</span><br><span class="line">        renderer: path.join(__dirname, <span class="string">'../src/renderer/main.js'</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    externals: [</span><br><span class="line">        <span class="comment">//编译白名单</span></span><br><span class="line">        ...Object.keys(dependencies || &#123;&#125;).filter(<span class="function"><span class="params">d</span> =&gt;</span> !whiteListedModules.includes(d))</span><br><span class="line">    ],</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">                use: ExtractTextPlugin.extract(&#123;</span><br><span class="line">                    fallback: <span class="string">'style-loader'</span>,</span><br><span class="line">                    use: <span class="string">'css-loader'</span></span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.html$/</span>,</span><br><span class="line">                use: <span class="string">'vue-html-loader'</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">                use: <span class="string">'babel-loader'</span>,</span><br><span class="line">                exclude: <span class="regexp">/node_modules/</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.node$/</span>,</span><br><span class="line">                use: <span class="string">'node-loader'</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.vue$/</span>,</span><br><span class="line">                use: &#123;</span><br><span class="line">                    loader: <span class="string">'vue-loader'</span>,</span><br><span class="line">                    options: &#123;</span><br><span class="line">                        extractCSS: process.env.NODE_ENV === <span class="string">'production'</span>,</span><br><span class="line">                        loaders: &#123;</span><br><span class="line">                            sass: <span class="string">'vue-style-loader!css-loader!sass-loader?indentedSyntax=1'</span>,</span><br><span class="line">                            scss: <span class="string">'vue-style-loader!css-loader!sass-loader'</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.(png|jpe?g|gif|svg)(\?.*)?$/</span>,</span><br><span class="line">                use: &#123;</span><br><span class="line">                    loader: <span class="string">'url-loader'</span>,</span><br><span class="line">                    query: &#123;</span><br><span class="line">                        limit: <span class="number">10000</span>,</span><br><span class="line">                        name: <span class="string">'imgs/[name]--[folder].[ext]'</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.(mp4|webm|ogg|mp3|wav|flac|aac)(\?.*)?$/</span>,</span><br><span class="line">                loader: <span class="string">'url-loader'</span>,</span><br><span class="line">                options: &#123;</span><br><span class="line">                    limit: <span class="number">10000</span>,</span><br><span class="line">                    name: <span class="string">'media/[name]--[folder].[ext]'</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.(woff2?|eot|ttf|otf)(\?.*)?$/</span>,</span><br><span class="line">                use: &#123;</span><br><span class="line">                    loader: <span class="string">'url-loader'</span>,</span><br><span class="line">                    query: &#123;</span><br><span class="line">                        limit: <span class="number">10000</span>,</span><br><span class="line">                        name: <span class="string">'fonts/[name]--[folder].[ext]'</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    node: &#123;</span><br><span class="line">        <span class="comment">//根据版本信息确定__dirname和__filename的行为</span></span><br><span class="line">        __dirname: process.env.NODE_ENV !== <span class="string">'production'</span>,</span><br><span class="line">        __filename: process.env.NODE_ENV !== <span class="string">'production'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="comment">//css文件分离</span></span><br><span class="line">        <span class="keyword">new</span> ExtractTextPlugin(<span class="string">'styles.css'</span>),</span><br><span class="line">        <span class="comment">//自动生成html首页</span></span><br><span class="line">        <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">            filename: <span class="string">'index.html'</span>,</span><br><span class="line">            template: path.resolve(__dirname, <span class="string">'../src/index.ejs'</span>),</span><br><span class="line">            minify: &#123;</span><br><span class="line">                collapseWhitespace: <span class="literal">true</span>,</span><br><span class="line">                removeAttributeQuotes: <span class="literal">true</span>,</span><br><span class="line">                removeComments: <span class="literal">true</span></span><br><span class="line">            &#125;,</span><br><span class="line">            nodeModules: process.env.NODE_ENV !== <span class="string">'production'</span></span><br><span class="line">                ? path.resolve(__dirname, <span class="string">'../node_modules'</span>)</span><br><span class="line">                : <span class="literal">false</span></span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="comment">//热更新模块</span></span><br><span class="line">        <span class="keyword">new</span> webpack.HotModuleReplacementPlugin(),</span><br><span class="line">        <span class="comment">//在编译出现错误时，使用 NoEmitOnErrorsPlugin 来跳过输出阶段</span></span><br><span class="line">        <span class="keyword">new</span> webpack.NoEmitOnErrorsPlugin()</span><br><span class="line">    ],</span><br><span class="line">    output: &#123;</span><br><span class="line">        filename: <span class="string">'[name].js'</span>,</span><br><span class="line">        libraryTarget: <span class="string">'commonjs2'</span>,</span><br><span class="line">        path: path.join(__dirname, <span class="string">'../dist/electron'</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    resolve: &#123;</span><br><span class="line">        alias: &#123;</span><br><span class="line">            <span class="comment">//在代码中使用@代表renderer目录</span></span><br><span class="line">            <span class="string">'@'</span>: path.join(__dirname, <span class="string">'../src/renderer'</span>),</span><br><span class="line">            <span class="comment">//精确指定vue特指vue.esm.js文件</span></span><br><span class="line">            <span class="string">'vue$'</span>: <span class="string">'vue/dist/vue.esm.js'</span></span><br><span class="line">        &#125;,</span><br><span class="line">        extensions: [<span class="string">'.js'</span>, <span class="string">'.vue'</span>, <span class="string">'.json'</span>, <span class="string">'.css'</span>, <span class="string">'.node'</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//指定编译为 Electron 渲染进程</span></span><br><span class="line">    target: <span class="string">'electron-renderer'</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这个配置文件的主要配置项都给出了注释，作用很容易理解，这里不再详细介绍，webpack更多配置可以查看<a href="https://webpack.docschina.org/configuration/" target="_blank" rel="noopener">这里</a>。</p><h2 id="1-2-渲染进程利用webpack对象来创建WebpackDevServer对象"><a href="#1-2-渲染进程利用webpack对象来创建WebpackDevServer对象" class="headerlink" title="1.2.渲染进程利用webpack对象来创建WebpackDevServer对象"></a>1.2.渲染进程利用webpack对象来创建WebpackDevServer对象</h2><p>我们先来区分一下三个概念：</p><ul><li><p>webpack</p><blockquote><p>webpack本身只是打包工具，不具备热更新功能</p></blockquote></li><li><p><a href="https://github.com/webpack/webpack-dev-middleware" target="_blank" rel="noopener">webpack-hot-middleware</a></p><blockquote><p>An express-style development middleware for use with webpack bundles and allows for serving of the files emitted from webpack. This should be used for development only.<br>The middleware installs itself as a webpack plugin, and listens for compiler events.<br> 他是一个运行于<strong>内存中</strong>的（非常重要的概念，作用稍后会提到）一个文件系统，可以检测文件改动自动编译（到内存中）。</p></blockquote></li><li><p><a href="https://github.com/webpack/webpack-dev-server" target="_blank" rel="noopener">webpack-dev-server</a></p><blockquote><p>Use webpack with a development server that provides live reloading. This should be used for development only.  It uses webpack-dev-middleware under the hood, which provides fast in-memory access to the webpack assets.<br> 他是利用webpack-hot-middleware搭建了Express的服务器，从而实现实时刷新的功能。</p></blockquote></li></ul><p>了解了这三个概念之后，我们来看具体如何创建WebpackDevServer对象，其实很简单，把我们刚才创建的webpack作为参数来初始化WebpackDevServer即可：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建webpackHotMiddleware</span></span><br><span class="line">hotMiddleware = webpackHotMiddleware(compiler, &#123;</span><br><span class="line">    log: <span class="literal">false</span>,</span><br><span class="line">    heartbeat: <span class="number">2500</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建WebpackDevServer</span></span><br><span class="line"><span class="keyword">const</span> server = <span class="keyword">new</span> WebpackDevServer(</span><br><span class="line">    <span class="comment">//以webpack对象作为参数</span></span><br><span class="line">    compiler,</span><br><span class="line">    &#123;</span><br><span class="line">        contentBase: path.join(__dirname, <span class="string">'../'</span>),</span><br><span class="line">        quiet: <span class="literal">true</span>,</span><br><span class="line">        before(app, ctx) &#123;</span><br><span class="line">            <span class="comment">//使用webpackHotMiddleware</span></span><br><span class="line">            app.use(hotMiddleware);</span><br><span class="line">            ctx.middleware.waitUntilValid(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                resolve();</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">//服务器运行在9080端口</span></span><br><span class="line">server.listen(<span class="number">9080</span>);</span><br></pre></td></tr></table></figure><p>这个创建过程很清晰，需要注意的是，webpackHotMiddleware的heartbeat的参数作用并不是检测文件的频率，而是保持服务器链接存活的心跳频率：</p><blockquote><p>heartbeat - How often to send heartbeat updates to the client to keep the connection alive. Should be less than the client’s timeout setting - usually set to half its value.</p></blockquote><h2 id="1-3-渲染进程监听webpack编译过程"><a href="#1-3-渲染进程监听webpack编译过程" class="headerlink" title="1.3.渲染进程监听webpack编译过程"></a>1.3.渲染进程监听webpack编译过程</h2><p>经过以上的步骤，渲染进程的初始化就基本上结束了，但是我们看到在创建过程中有两个“小插曲”：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">compiler.plugin(<span class="string">'compilation'</span>, compilation =&gt; &#123;</span><br><span class="line">    compilation.plugin(<span class="string">'html-webpack-plugin-after-emit'</span>, (data, cb) =&gt; &#123;</span><br><span class="line">        hotMiddleware.publish(&#123;<span class="attr">action</span>: <span class="string">'reload'</span>&#125;);</span><br><span class="line">        cb();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">compiler.plugin(<span class="string">'done'</span>, stats =&gt; &#123;</span><br><span class="line">    logStats(<span class="string">'Renderer'</span>, stats);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>其中第二个logStats作用就是在终端屏幕上输出编译过程（后面我们在看main进程编译过程也会输出到终端中），如图所示：<br><img src="render编译log.png" alt=""><br>而第一个hotMiddleware.publish()作用是什么呢？<br>这其实是一个钩子函数，检测webpack的编译状态，把其中的<code>html-webpack-plugin-after-emit</code>状态，发布到webpackHotMiddleware中。</p><blockquote><p>我们可以检测多种状态，比如</p><ul><li>html-webpack-plugin-before-html-processing</li><li>html-webpack-plugin-after-html-processing</li><li>html-webpack-plugin-after-emit</li></ul></blockquote><p>然后我们就可以在渲染进程中检测到这一状态。<br>然后还记得之前的dev-client模块吗？我们再来看一下源码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> hotClient = <span class="built_in">require</span>(<span class="string">'webpack-hot-middleware/client?noInfo=true&amp;reload=true'</span>);</span><br><span class="line"><span class="comment">//注册webpack-hot-middleware监听器</span></span><br><span class="line">hotClient.subscribe(<span class="function"><span class="params">event</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//这里只处理了Main进程发送的"compiling"的事件，实际上在Render进程中还发送了"reload"的消息</span></span><br><span class="line">    <span class="keyword">if</span> (event.action === <span class="string">'compiling'</span>) &#123;</span><br><span class="line">      ...</span><br><span class="line">      &lt;div id=<span class="string">"dev-client"</span>&gt;</span><br><span class="line">        Compiling Main Process...</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    `;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;);</span></span><br></pre></td></tr></table></figure><p>也就是说，在整个webpack-hot-middleware编译过程中发送的编译消息，将会在界面展示一个提示框提示开发者，编译器正在进行的工作。<br>从这一点来看也发现，该框架的作者对细节的把握多么的重视。</p><h1 id="2-主进程过程分析"><a href="#2-主进程过程分析" class="headerlink" title="2.主进程过程分析"></a>2.主进程过程分析</h1><p>前面分析了渲染进程的启动过程，现在来看主进程的启动过程。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">startMain</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        mainConfig.entry.main = [path.join(__dirname, <span class="string">'../src/main/index.dev.js'</span>)].concat(mainConfig.entry.main);</span><br><span class="line">        <span class="comment">//创建主进程的webpack</span></span><br><span class="line">        <span class="keyword">const</span> compiler = webpack(mainConfig);</span><br><span class="line"></span><br><span class="line">        compiler.plugin(<span class="string">'watch-run'</span>, (compilation, done) =&gt; &#123;</span><br><span class="line">            <span class="comment">//向webpack-hot-middleware发布"compiling"的消息，用于页面显示</span></span><br><span class="line">            hotMiddleware.publish(&#123;<span class="attr">action</span>: <span class="string">'compiling'</span>&#125;);</span><br><span class="line">            done();</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        compiler.watch(&#123;&#125;, (err, stats) =&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (err) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            ...</span><br><span class="line">            <span class="keyword">if</span> (electronProcess &amp;&amp; electronProcess.kill) &#123;</span><br><span class="line">                <span class="comment">//主进程文件发生改变，重启Electron</span></span><br><span class="line">                manualRestart = <span class="literal">true</span>;</span><br><span class="line">                process.kill(electronProcess.pid);</span><br><span class="line">                electronProcess = <span class="literal">null</span>;</span><br><span class="line">                startElectron();</span><br><span class="line"></span><br><span class="line">                setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                    manualRestart = <span class="literal">false</span>;</span><br><span class="line">                &#125;, <span class="number">5000</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            resolve();</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主进程的启动和渲染进程非常相似，共经历了三个步骤：</p><ul><li>创建webpack</li><li>实时发布hotMiddleware状态（用于页面展示编译过程）</li><li>主进程的代码”热更新”</li></ul><p>下面我们也来分别介绍这三个过程。</p><h2 id="1-1-主进程的webpack创建过程"><a href="#1-1-主进程的webpack创建过程" class="headerlink" title="1.1.主进程的webpack创建过程"></a>1.1.主进程的webpack创建过程</h2><p>webpack创建的关键在于配置文件，和渲染进程一样，主进程也有两个配置文件：</p><ul><li>/src/main/index.dev.js</li><li>/.electron-vue/webpack.main.config.js</li></ul><p>下面分别介绍他们内容。</p><h3 id="主进程的index-dev-js配置文件"><a href="#主进程的index-dev-js配置文件" class="headerlink" title="主进程的index.dev.js配置文件"></a>主进程的index.dev.js配置文件</h3><p>我们直接来看这个文件内容。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">process.env.NODE_ENV = <span class="string">'development'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//安装`electron-debug`工具</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">'electron-debug'</span>)(&#123; <span class="attr">showDevTools</span>: <span class="literal">true</span> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//安装Vue的一个chrome开发工具`vue-devtools`</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">'electron'</span>).app.on(<span class="string">'ready'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> installExtension = <span class="built_in">require</span>(<span class="string">'electron-devtools-installer'</span>)</span><br><span class="line">  installExtension.default(installExtension.VUEJS_DEVTOOLS)</span><br><span class="line">    .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;)</span><br><span class="line">    .catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'Unable to install `vue-devtools`: \n'</span>, err)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>这个配置文件的作用就是安装了<code>electron-debug</code>和<code>vue-devtools</code>两个工具，其中<code>vue-devtools</code>工具因为网络原因无法安装，可以自己手动安装。</p><h3 id="主进程的webpack-main-config-js配置文件"><a href="#主进程的webpack-main-config-js配置文件" class="headerlink" title="主进程的webpack.main.config.js配置文件"></a>主进程的webpack.main.config.js配置文件</h3><p>这个文件主要配置项如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> mainConfig = &#123;</span><br><span class="line">    entry: &#123;</span><br><span class="line">        main: path.join(__dirname, <span class="string">'../src/main/index.js'</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    externals: [</span><br><span class="line">        ...Object.keys(dependencies || &#123;&#125;)</span><br><span class="line">    ],</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">                use: <span class="string">'babel-loader'</span>,</span><br><span class="line">                exclude: <span class="regexp">/node_modules/</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.node$/</span>,</span><br><span class="line">                use: <span class="string">'node-loader'</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    node: &#123;</span><br><span class="line">        __dirname: process.env.NODE_ENV !== <span class="string">'production'</span>,</span><br><span class="line">        __filename: process.env.NODE_ENV !== <span class="string">'production'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    output: &#123;</span><br><span class="line">        filename: <span class="string">'[name].js'</span>,</span><br><span class="line">        libraryTarget: <span class="string">'commonjs2'</span>,</span><br><span class="line">        path: path.join(__dirname, <span class="string">'../dist/electron'</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="keyword">new</span> webpack.NoEmitOnErrorsPlugin()</span><br><span class="line">    ],</span><br><span class="line">    resolve: &#123;</span><br><span class="line">        extensions: [<span class="string">'.js'</span>, <span class="string">'.json'</span>, <span class="string">'.node'</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//编译为 Electron 主进程</span></span><br><span class="line">    target: <span class="string">'electron-main'</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>他和渲染进程最大不同就是主进程处理的文件很有限，他不会（不需要）处理vue、图片、css、html等文件类型。</p><h2 id="2-2-主进程的编译过程跟踪"><a href="#2-2-主进程的编译过程跟踪" class="headerlink" title="2.2.主进程的编译过程跟踪"></a>2.2.主进程的编译过程跟踪</h2><p>这里和渲染进程的跟踪稍有不同，我们对比一下：<br><strong>渲染进程</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">compiler.plugin(<span class="string">'compilation'</span>, compilation =&gt; &#123;</span><br><span class="line">    compilation.plugin(<span class="string">'html-webpack-plugin-after-emit'</span>, (data, cb) =&gt; &#123;</span><br><span class="line">        hotMiddleware.publish(&#123;<span class="attr">action</span>: <span class="string">'reload'</span>&#125;);</span><br><span class="line">        cb();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>主进程</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">compiler.plugin(<span class="string">'watch-run'</span>, (compilation, done) =&gt; &#123;</span><br><span class="line">    logStats(<span class="string">'Main'</span>, chalk.white.bold(<span class="string">'compiling...'</span>));</span><br><span class="line">    hotMiddleware.publish(&#123;<span class="attr">action</span>: <span class="string">'compiling'</span>&#125;);</span><br><span class="line">    done();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>从这里发现，他们分别监听了编译的不同事件。渲染进程监听的是<code>compilation</code>，而主进程监听的是<code>watch-run</code>。</p><blockquote><p>这里的”watch-run”只会出现在webpack3.X版本中，在webpack4.x版本上，”watch-run”事件被修改为了”watchRun”事件。<br>webpack还支持的一些事件包括：</p><ul><li>afterPlugins</li><li>afterResolvers</li><li>environment</li><li>afterEnvironment</li><li>beforeRun</li><li>run</li><li>beforeCompile</li><li>afterCompile</li></ul></blockquote><p>从webpack说明文档看出，”compilation”会在编译器创建时触发：</p><blockquote><p>Runs a plugin after a compilation has been created</p></blockquote><p>“watchRun”也是会在编译器创建之后被触发，不同的是，这个这个事件只有在”watch mode”模式下才会生效：</p><blockquote><p>Executes a plugin during watch mode after a new compilation is triggered but before the compilation is actually started.</p></blockquote><p>由于渲染进程使用了<code>WebpackDevServer</code>的热更新，因此可以检测<code>compilation</code>事件来跟踪事件。<br>主进程在初始化过程中，由于没有使用<code>WebpackDevServer</code>，而是开启了<code>watch</code>模式，所以可以检测到这个事件。</p><h2 id="2-3-主进程的代码”热更新”"><a href="#2-3-主进程的代码”热更新”" class="headerlink" title="2.3.主进程的代码”热更新”"></a>2.3.主进程的代码”热更新”</h2><p>主进程没有使用WebpackDevServer的方式自动更新界面，而是通过webpack的watch模式，不断重启Electron实现的：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">compiler.watch(&#123;&#125;, (err, stats) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (electronProcess &amp;&amp; electronProcess.kill) &#123;</span><br><span class="line">        manualRestart = <span class="literal">true</span>;</span><br><span class="line">        process.kill(electronProcess.pid);</span><br><span class="line">        electronProcess = <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">//重启Electron</span></span><br><span class="line">        startElectron();</span><br><span class="line"></span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            manualRestart = <span class="literal">false</span>;</span><br><span class="line">        &#125;, <span class="number">5000</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    resolve();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="3-Electron过程分析"><a href="#3-Electron过程分析" class="headerlink" title="3.Electron过程分析"></a>3.Electron过程分析</h1><p>前面两节分析了主进程和渲染进程的创建流程，在调试模式命令的最后一步就是开启Electron：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">Promise</span>.all([startRenderer(), startMain()])</span><br><span class="line">        .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            startElectron();</span><br><span class="line">        &#125;)</span><br><span class="line">        .catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">        &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面我们来看如何开启Electron：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">startElectron</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    electronProcess = spawn(electron, [<span class="string">'--inspect=5858'</span>, <span class="string">'.'</span>]);</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>原来是通过node的spawn方法运行了electron，并传递了两个参数。<br>两个参数分别代表打开5858的调试端口和electron的运行目录（也就是当前目录）。<br>至此，调试环境运行时的流程就介绍完了，我们用一张流程图来归纳一下这个过程：<br><img src="流程.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- toc --&gt;
&lt;p&gt;这一节我们来看开发环境的启动流程。&lt;br&gt;该框架主要修改是对开发环境的优化，包括了于开发环境的配置文件隔离，主进程和渲染进程配置文件隔离，编译过程提示等功能，因此这一节内容才是整个框架的核心。&lt;br&gt;我们从开发人员用到的启动命令说起。&lt;br&gt;从pa
      
    
    </summary>
    
    
      <category term="electron" scheme="/tags/electron/"/>
    
      <category term="vue" scheme="/tags/vue/"/>
    
      <category term="electron-vue" scheme="/tags/electron-vue/"/>
    
      <category term="前端" scheme="/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>electron-vue架构解析-生产环境打包过程分析</title>
    <link href="/2018/06/08/electron-vue%E6%9E%B6%E6%9E%84%E8%A7%A3%E6%9E%90-%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83%E6%89%93%E5%8C%85%E8%BF%87%E7%A8%8B%E5%88%86%E6%9E%90/"/>
    <id>/2018/06/08/electron-vue架构解析-生产环境打包过程分析/</id>
    <published>2018-06-08T08:46:45.000Z</published>
    <updated>2018-06-08T09:00:12.213Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><p>我们先从生产环境打包流程来分析。<br>从package.json文件入口来看打包命令和调用的脚本：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">  <span class="string">"build"</span>: <span class="string">"node .electron-vue/build.js"</span>,</span><br><span class="line">  <span class="string">"build:darwin"</span>: <span class="string">"cross-env BUILD_TARGET=darwin node .electron-vue/build.js"</span>,</span><br><span class="line">  <span class="string">"build:linux"</span>: <span class="string">"cross-env BUILD_TARGET=linux node .electron-vue/build.js"</span>,</span><br><span class="line">  <span class="string">"build:mas"</span>: <span class="string">"cross-env BUILD_TARGET=mas node .electron-vue/build.js"</span>,</span><br><span class="line">  <span class="string">"build:win32"</span>: <span class="string">"cross-env BUILD_TARGET=win32 node .electron-vue/build.js"</span>,</span><br><span class="line">  <span class="string">"build:clean"</span>: <span class="string">"cross-env BUILD_TARGET=clean node .electron-vue/build.js"</span>,</span><br><span class="line">  <span class="string">"build:web"</span>: <span class="string">"cross-env BUILD_TARGET=web node .electron-vue/build.js"</span>,</span><br><span class="line">  ...</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>这说明打包的入口文件为build.js，我们就从这个入口文件来分析打包的过程。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//用到的配置文件</span></span><br><span class="line"><span class="keyword">const</span> buildConfig = <span class="built_in">require</span>(<span class="string">'./build.config'</span>)</span><br><span class="line"><span class="keyword">const</span> mainConfig = <span class="built_in">require</span>(<span class="string">'./webpack.main.config'</span>)</span><br><span class="line"><span class="keyword">const</span> rendererConfig = <span class="built_in">require</span>(<span class="string">'./webpack.renderer.config'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//除了`clean`和`web`的命令外，其他指令都会进行build()的操作：</span></span><br><span class="line"><span class="keyword">if</span> (process.env.BUILD_TARGET === <span class="string">'clean'</span>) clean()</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (process.env.BUILD_TARGET === <span class="string">'web'</span>) web()</span><br><span class="line"><span class="keyword">else</span> build()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">build</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="comment">//构建app</span></span><br><span class="line">  bundleApp()</span><br><span class="line"></span><br><span class="line">  ...</span><br><span class="line">  <span class="comment">//打包主进程</span></span><br><span class="line">  pack(mainConfig).then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">  &#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  ...</span><br><span class="line">  <span class="comment">//打包渲染进程</span></span><br><span class="line">  pack(rendererConfig).then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">  &#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bundleApp</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  packager(buildConfig, (err, appPaths) =&gt; &#123;</span><br><span class="line">        ...</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pack</span> (<span class="params">config</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    webpack(config, (err, stats) =&gt; &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个构建步骤中，分别进行了三个操作：</p><ul><li>使用buildConfig(也就是build.config.js)–构建app</li><li>使用mainConfig(也就是webpack.main.config.js)–打包主进程</li><li>使用rendererConfig(也就是webpack.renderer.config.js)–打包渲染进程</li></ul><p>主进程和渲染进程使用的配置文件我们在稍后的开发流程中分析，这里主要看构建app用的配置文件，也就是build.config文件：<br>文件内容很简单，我们直接贴出源码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="comment">//目标架构和平台</span></span><br><span class="line">    arch: <span class="string">'x64'</span>,</span><br><span class="line">    platform: process.env.BUILD_TARGET || <span class="string">'all'</span>,</span><br><span class="line">    <span class="comment">//是否启用asar压缩打包</span></span><br><span class="line">    asar: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">//打包目录</span></span><br><span class="line">    dir: path.join(__dirname, <span class="string">'../'</span>),</span><br><span class="line">    <span class="comment">//应用图标</span></span><br><span class="line">    icon: path.join(__dirname, <span class="string">'../build/icons/icon'</span>),</span><br><span class="line">    ignore: <span class="regexp">/(^\/(src|test|\.[a-z]+|README|yarn|static|dist\/web))|\.gitkeep/</span>,</span><br><span class="line">    out: path.join(__dirname, <span class="string">'../build'</span>),</span><br><span class="line">    overwrite: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个文件内容很简单，用于electron-packager打包时读取，主要配置了最终生成exe文件的一些参数，包括：</p><ul><li>arch</li><li>platform<br> 目标架构和平台</li><li>asar<br> 是否启用asar压缩打包</li><li>out</li><li>dir<br> 指定生成目录</li><li>icon<br> 图标</li><li>ignore<br> 忽略那些文件</li><li>overwrite<br> 覆盖模式打包</li></ul><p>该文件中配置的参数其实都可以通过命令的形式实现：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">electron-packager ./app &lt;name&gt; --platform=win32 --arch=x64 --overwrite --ignore=dev-settings</span><br></pre></td></tr></table></figure><p>写在配置文件中可以实现“傻瓜式”的打包目的。<br>这就是生产环境打包的过程。<br>下一节我们看开发环境的启动过程。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- toc --&gt;
&lt;p&gt;我们先从生产环境打包流程来分析。&lt;br&gt;从package.json文件入口来看打包命令和调用的脚本：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;p
      
    
    </summary>
    
    
      <category term="electron" scheme="/tags/electron/"/>
    
      <category term="vue" scheme="/tags/vue/"/>
    
      <category term="electron-vue" scheme="/tags/electron-vue/"/>
    
      <category term="前端" scheme="/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>electron-vue架构解析-序言</title>
    <link href="/2018/06/08/electron-vue%E6%9E%B6%E6%9E%84%E8%A7%A3%E6%9E%90-%E5%BA%8F%E8%A8%80/"/>
    <id>/2018/06/08/electron-vue架构解析-序言/</id>
    <published>2018-06-08T08:41:45.000Z</published>
    <updated>2018-06-08T08:59:56.972Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><p>本系列文章将介绍<a href="https://github.com/SimulatedGREG/electron-vue" target="_blank" rel="noopener">electron-vue</a>前端框架的作用、结构、使用方法。</p><p>electron-vue是SimulatedGREG基于<a href="https://github.com/vuejs/vue-cli" target="_blank" rel="noopener">vue-cli</a>搭建的Vue+Webpack+Electron脚手架，可以用来开发跨PC平台的应用，源码地址在<a href="https://github.com/SimulatedGREG/electron-vue" target="_blank" rel="noopener">这里</a>。<br>其主要功能/特色包括：</p><ul><li>主进程和渲染进程配置文件分离</li><li>代码热更新</li><li>详细的Log输出</li><li>除了必备的Electron、Vue、Webpack等插件外，还可以一键配置：Axios\Vue-router\Vuex\Eslint\等插件</li></ul><p>由于其自带的<a href="https://simulatedgreg.gitbooks.io/electron-vue/content/en/" target="_blank" rel="noopener">说明文件</a>仅仅说明了该项目的概要、使用方法，并没有整个结构的解释，本系列文章就来从源码角度分析这个脚手架如何管理代码、如何分离编译环境、如何进行热更新等问题。</p><h1 id="1-下载架构模板"><a href="#1-下载架构模板" class="headerlink" title="1.下载架构模板"></a>1.下载架构模板</h1><p>由于electron-vue基于<strong>vue-cli</strong>进行了二次封装，因此在使用之前，需要先安装vue-cli的脚手架：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g vue-cli</span><br></pre></td></tr></table></figure><p>然后初始化electron-vue的项目：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue init simulatedgreg/electron-vue my-project</span><br></pre></td></tr></table></figure><p>然后在项目根目录下使用npm或yarn安装依赖即可使用：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd my-project</span><br><span class="line">yarn # or npm install</span><br><span class="line">yarn run dev # or npm run dev</span><br></pre></td></tr></table></figure><h1 id="2-代码结构"><a href="#2-代码结构" class="headerlink" title="2.代码结构"></a>2.代码结构</h1><p>我们先来看一下原始版的代码结构：<br>图图图<br>从这个结构中可以看到该框架下的文件大致可以分为四个部分：</p><ul><li>webpack配置文件</li><li>生成目录&amp;依赖目录</li><li>源码目录</li><li>全局配置文件</li></ul><p>接下来的几个小节我们分别来介绍他们的作用。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- toc --&gt;
&lt;p&gt;本系列文章将介绍&lt;a href=&quot;https://github.com/SimulatedGREG/electron-vue&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;electron-vue&lt;/a&gt;前端框架的作用、结构、使用
      
    
    </summary>
    
    
      <category term="electron" scheme="/tags/electron/"/>
    
      <category term="vue" scheme="/tags/vue/"/>
    
      <category term="electron-vue" scheme="/tags/electron-vue/"/>
    
      <category term="前端" scheme="/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>在Github上使用Hexo搭建博客并配置tranquilpeak主题（原）</title>
    <link href="/2018/02/07/%E5%9C%A8Github%E4%B8%8A%E4%BD%BF%E7%94%A8Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E5%B9%B6%E9%85%8D%E7%BD%AEtranquilpeak%E4%B8%BB%E9%A2%98%EF%BC%88%E5%8E%9F%EF%BC%89/"/>
    <id>/2018/02/07/在Github上使用Hexo搭建博客并配置tranquilpeak主题（原）/</id>
    <published>2018-02-07T06:06:25.000Z</published>
    <updated>2018-02-07T06:28:32.590Z</updated>
    
    <content type="html"><![CDATA[<p>该文章将会引导大家使用Hexo搭建私人博客，并配置tranquilpeak主题，最终效果<a href="https://dushaofeng.github.io/" target="_blank" rel="noopener">如此</a>，请<strong>严格按照</strong>以下顺序进行操作。<br><a id="more"></a></p><p>文章目录<br><!-- toc --></p><h1 id="1-创建Hexo工程"><a href="#1-创建Hexo工程" class="headerlink" title="1.创建Hexo工程"></a>1.创建Hexo工程</h1><p>cmd下以此执行以下命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo init XXX</span><br><span class="line">cd XXX</span><br><span class="line">npm install</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure></p><p>然后打开浏览器的<code>http://127.0.0.1:4000/</code>地址即可看到默认的Hexo页面。</p><h1 id="2-导入tranquilpeak主题"><a href="#2-导入tranquilpeak主题" class="headerlink" title="2.导入tranquilpeak主题"></a>2.导入tranquilpeak主题</h1><ul><li>下载tranquilpeak的<a href="https://github.com/LouisBarranqueiro/hexo-theme-tranquilpeak/blob/master/docs/user.md" target="_blank" rel="noopener">主题包</a><blockquote><p>不要用git的方式clone，否则里面的node_modules无法安装</p></blockquote></li><li>将主题包解压到Hexo项目的themes文件夹下面，重命名为<code>tranquilpeak</code></li><li>主题里面包含了node_modules文件夹，<strong>不需要</strong>执行<code>npm install</code></li><li>修改<strong>根目录</strong>下的<strong>_config.yml</strong>文件，将theme变量设置为tranquilpeak</li></ul><p><strong>上面操作完成之后，先不要运行hexo s，还有一些必要的配置完成之后才可以</strong></p><h1 id="3-必要配置项"><a href="#3-必要配置项" class="headerlink" title="3.必要配置项"></a>3.必要配置项</h1><h2 id="3-1-根目录的-config文件配置"><a href="#3-1-根目录的-config文件配置" class="headerlink" title="3.1.根目录的_config文件配置"></a>3.1.根目录的_config文件配置</h2><ul><li>subtitle、description、author信息</li><li>language信息，要用themes\tranquilpeak\languages目录中的语言文件名称，比如中文的话，要用zh-cn，<strong>注意大小写</strong></li><li>post_asset_folder–&gt;true，在推送文章时，才会将资源文件推送服务器</li><li>relative_link–&gt;false</li></ul><h2 id="3-2-tranquilpeak目录的-config文件配置"><a href="#3-2-tranquilpeak目录的-config文件配置" class="headerlink" title="3.2.tranquilpeak目录的_config文件配置"></a>3.2.tranquilpeak目录的_config文件配置</h2><ul><li>侧边栏sidebar的定制，可以删除、调整某个链接</li><li>Header配置，Header是显示文章时右上角的小图标，可以制定其图标或者作用</li><li>Author配置，可以配置作者的邮箱信息</li><li>Author的picture是头像，可以使用外链，或者把文件放在主题themes\tranquilpeak\source\assets\images文件夹内，使用时直接使用图片名称即可，如Photo.jpg</li><li>Author的工作、个人简介信息要去themes\tranquilpeak\languages下面当前语言的文件里面的author项中配置</li></ul><h1 id="4-运行项目"><a href="#4-运行项目" class="headerlink" title="4.运行项目"></a>4.运行项目</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>运行之后，刷新浏览器的<a href="http://127.0.0.1:4000/地址即可，记得要点击地址栏左侧的提示，禁用该地址的cookie，否则会在更新配置后看不到更新。" target="_blank" rel="noopener">http://127.0.0.1:4000/地址即可，记得要点击地址栏左侧的提示，禁用该地址的cookie，否则会在更新配置后看不到更新。</a></p><h1 id="5-主题config的其他配置"><a href="#5-主题config的其他配置" class="headerlink" title="5.主题config的其他配置"></a>5.主题config的其他配置</h1><ul><li><p>sidebar_behavior</p><blockquote><p>配置项可以改变侧边栏的动作，包括侧边栏大小、是否自动隐藏等，配置选项为1–6，可以自己尝试配一下</p></blockquote></li><li><p>clear_reading</p><blockquote><p>读文件时是否显示侧边栏</p></blockquote></li><li><p>cover_image:</p><blockquote><p>博客全局的背影图片，图片资源放在主题的\themes\tranquilpeak\source\assets\images目录，配置项直接使用图片文件名称，比如common_bg.jpg</p></blockquote></li><li><p>author_links:</p><blockquote><p>配置侧边栏里面的个人链接(区别于侧边栏的内容菜单，比如首页、分类、归档等)，比如添加知乎、github、微博等链接，包括标题、链接地址、图标等</p></blockquote></li><li><p>修改侧边栏的所有菜单、链接名称</p><blockquote><p>如果要修改侧边栏的显示名称，需要到语言文件中修改相应中文即可</p></blockquote></li></ul><h1 id="6-启用RSS订阅功能"><a href="#6-启用RSS订阅功能" class="headerlink" title="6.启用RSS订阅功能"></a>6.启用RSS订阅功能</h1><p>项目根目录执行：<br><code>npm install hexo-generator-feed --save</code><br>在根目录的config中添加如下配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">feed:</span><br><span class="line">    type: atom</span><br><span class="line">    path: atom.xml</span><br><span class="line">    limit: 20</span><br></pre></td></tr></table></figure></p><h1 id="7-启用侧边栏的”分类”菜单"><a href="#7-启用侧边栏的”分类”菜单" class="headerlink" title="7.启用侧边栏的”分类”菜单"></a>7.启用侧边栏的”分类”菜单</h1><ul><li>hexo new page “all-categories”</li><li>修改根目录的source/all-categories/index.md文件，将内容替换如下，包括三个”—“符号哦<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">title: &quot;all-categories&quot;</span><br><span class="line">layout: &quot;all-categories&quot;</span><br><span class="line">comments: false</span><br></pre></td></tr></table></figure></li></ul><h1 id="8-启用侧边栏的”标签”菜单"><a href="#8-启用侧边栏的”标签”菜单" class="headerlink" title="8.启用侧边栏的”标签”菜单"></a>8.启用侧边栏的”标签”菜单</h1><ul><li>hexo new page “all-tags”</li><li>替换根目录的source/all-tags/index.md中的内容如下：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">title: &quot;all-tags&quot;</span><br><span class="line">layout: &quot;all-tags&quot;</span><br><span class="line">comments: false</span><br></pre></td></tr></table></figure><h1 id="9-启用侧边栏的”归档”菜单"><a href="#9-启用侧边栏的”归档”菜单" class="headerlink" title="9.启用侧边栏的”归档”菜单"></a>9.启用侧边栏的”归档”菜单</h1><ul><li>hexo new page “all-archives”</li><li>替换根目录的source/all-archives/index.md中的内容如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">title: &quot;all-archives&quot;</span><br><span class="line">layout: &quot;all-archives&quot;</span><br><span class="line">comments: false</span><br></pre></td></tr></table></figure></li></ul><h1 id="10-写文章"><a href="#10-写文章" class="headerlink" title="10.写文章"></a>10.写文章</h1><ul><li>还是把自带的那个hello-world.md文章删掉吧，太丑了</li><li>hexo new “XXX” 新建一篇文章</li></ul><blockquote><p>一定看清，这里的new命令后面直接跟上带日期的文章名称，并且没有page参数!</p></blockquote><p>上面的命令将会在工程的<code>source\_posts</code>文件夹下面生成一个文件和相同名称的文件夹，其中的文件就是博客内容，文件夹用来放置当前文章所用的一些资源，比如图片等。<br>编辑文章内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 2018-02-05-测试文章</span><br><span class="line">subtitle: 子标题</span><br><span class="line">date: 2018-02-06 10:13:19</span><br><span class="line">tags:</span><br><span class="line">    - Android</span><br><span class="line">    - 前端</span><br><span class="line">clearReading: true</span><br><span class="line">thumbnailImage: thumbnail_image.jpg</span><br><span class="line">thumbnailImagePosition: bottom</span><br><span class="line">autoThumbnailImage: true</span><br><span class="line">metaAlignment: center</span><br><span class="line">coverImage: cover_image.jpg</span><br><span class="line">coverCaption: &quot;图片说明&quot;</span><br><span class="line">coverMeta: in</span><br><span class="line">coverSize: partial</span><br><span class="line">comments: false</span><br><span class="line">meta: false</span><br><span class="line">actions: false</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">这里是文章的概览，显示在主页缩略内容上面</span><br><span class="line">&lt;!-- more --&gt;</span><br><span class="line"></span><br><span class="line">这里是自动生成的文章目录</span><br><span class="line">&lt;!-- toc --&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&gt;CSDN的发布流程烂到家了，只能自己动手搭建技术博客</span><br><span class="line"></span><br><span class="line"># 这是大标题</span><br><span class="line"></span><br><span class="line">## 这是二级标题</span><br><span class="line"></span><br><span class="line">## 这里有个本地图片</span><br><span class="line">![](title_image.jpg)</span><br><span class="line"></span><br><span class="line">## 这里有个网络图片</span><br><span class="line">![](http://ww3.sinaimg.cn/large/006tNc79gw1fb0neee6mlj30dw0aldgf.jpg)</span><br><span class="line"></span><br><span class="line">## 文章结束</span><br></pre></td></tr></table></figure><p><strong>配置解释</strong></p><ul><li><p><code>tags</code></p><blockquote><p>定义该文章的标签，定义之后可以在分类里面查看自动建立的索引</p></blockquote></li><li><p><code>thumbnailImage</code></p><blockquote><p>首页的文章标题旁边图片</p></blockquote></li><li><p><code>thumbnailImagePosition</code></p><blockquote><p>首页的文章图片位置</p></blockquote></li><li><p><code>coverImage</code></p><blockquote><p>文章打开时顶部的封面图片</p></blockquote></li><li><p><code>&lt;!-- more --&gt;</code></p><blockquote><p>这个标志之前的内容将会自动生成首页的概览</p></blockquote></li><li><p><code>&lt;!-- toc --&gt;</code></p><blockquote><p>这个标志的位置将会自动生成文章目录</p></blockquote></li><li><p><code>metaAlignment</code></p><blockquote><p>查看文章时，文章标题的排列，居左还是居中</p></blockquote></li><li><p><code>coverMeta</code></p><blockquote><p>文章的标题是在文章图片背景的内部，还是底部</p></blockquote></li><li><p><code>coverSize</code></p><blockquote><p>文章背景大小，full为全屏，partial为60%</p></blockquote></li></ul><p><strong>thumbnailImage加载不出来</strong><br>如果thumbnailImage中设置的本地图片加载不出来，可以设置_config文件的url–&gt;/，即可正常加载</p><h1 id="11-推送Github"><a href="#11-推送Github" class="headerlink" title="11.推送Github"></a>11.推送Github</h1><ul><li><p>安装推送工具</p><blockquote><p>npm install hexo-deployer-git –save</p></blockquote></li><li><p>配置根目录的_config文件中的github地址</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: git@github.com:dushaofeng/dushaofeng.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure></li><li><p>生成静态页面并验证</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure></li><li><p>推送到github</p><blockquote><p>hexo d</p></blockquote></li><li><p><strong>等待15分钟</strong>后刷新github地址即可</p></li></ul><p><strong>提示</strong><br>这里的github推送地址和当前Hexo项目地址是分开的，也就是说，github.io的地址上面是没有hexo源码的，只有生成的静态页面。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;该文章将会引导大家使用Hexo搭建私人博客，并配置tranquilpeak主题，最终效果&lt;a href=&quot;https://dushaofeng.github.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;如此&lt;/a&gt;，请&lt;strong&gt;严格按照&lt;/strong&gt;以下顺序进行操作。&lt;br&gt;
    
    </summary>
    
    
      <category term="Hexo" scheme="/tags/Hexo/"/>
    
      <category term="Github" scheme="/tags/Github/"/>
    
      <category term="tranquilpeak" scheme="/tags/tranquilpeak/"/>
    
      <category term="教程" scheme="/tags/%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
</feed>
